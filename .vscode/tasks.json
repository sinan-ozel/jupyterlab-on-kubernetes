
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
      {
        "label": "download-hello-world-kubeconfig",
        "type": "shell",
        "command": [
          "[ -f ${workspaceFolder}/iac/hello-k8s.json ] && rm ${workspaceFolder}/iac/hello-k8s.json;",
          "gh run download --repo ${config:iac.repo} --name pulumi-${input:provider}-hello-k8s --dir ${workspaceFolder}/iac;",
          "cat iac/hello-k8s.json | jq -r '.kubeconfig' > ${workspaceFolder}/iac/kubeconfig.yaml;",
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "presentation": {
            "echo": true,
            "reveal": "always",
            "focus": false,
            "panel": "shared"
        },
        "problemMatcher": [],
      },
      {
        "label": "build-fastapi",
        "type": "shell",
        "command": [
          "docker build --tag fastapi:latest --file ./fastapi/Dockerfile .;",
        ],
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "push-fastapi-to-aws",
        "dependsOn": ["build", "freeze"],
        "type": "shell",
        "command": [
          "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID = $(aws sts get-caller-identity --query Account --output text); ",
            "$HOSTNAME = \\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin $HOSTNAME;",
            "docker tag fastapi:latest $HOSTNAME/test/fastapi:latest;",
            "docker push $HOSTNAME/test/fastapi:latest;",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "build-kubyterlab-llm",
        "type": "shell",
        "command": [
          "docker build --tag kubyterlab-llm:${config:kubyterlab-llm.version} --file ./kubyterlab-llm/Dockerfile .;",
        ],
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "push-kubyterlab-llm-to-docker",
        "dependsOn": "test",
        "type": "shell",
        "command": [
          "docker login;",
          "docker tag kubyterlab-llm:${config:kubyterlab-llm.version} ${config:docker.author-name}/kubyterlab-llm:${config:kubyterlab-llm.version};",
          "docker push ${config:docker.author-name}/kubyterlab-llm:${config:kubyterlab-llm.version};",
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "presentation": {
            "echo": true,
            "reveal": "always",
            "focus": false,
            "panel": "shared"
        },
        "problemMatcher": []
      },
      {
        "label": "push-kubyterlab-llm-to-aws",
        "dependsOn": ["build", "freeze"],
        "type": "shell",
        "command": [
          "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID = $(aws sts get-caller-identity --query Account --output text); ",
            "$HOSTNAME = \\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin $HOSTNAME;",
            "docker tag kubyterlab-llm:${config:kubyterlab-llm.version} $HOSTNAME/kubyterlab-llm:${config:kubyterlab-llm.version};",
            "docker push $HOSTNAME/kubyterlab-llm:${config:kubyterlab-llm.version};",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "test-kubyterlab-llm",
        "dependsOn": "build",
        "type": "shell",
        "command": [
          "docker run -d --rm --volume ${workspaceFolder}/kubyterlab-llm/notebooks:/jupyterlab/notebooks --gpus=all --name kubyterlab-llm kubyterlab-llm:${config:kubyterlab-llm.version};",
          "docker exec -it kubyterlab-llm bash -c 'nvcc --version';",
          "docker exec -it kubyterlab-llm bash -c 'nvidia-smi --version';",
          "docker exec -it kubyterlab-llm bash -c 'nvidia-smi';",
          "docker exec -it kubyterlab-llm python3 -c 'import torch; assert torch.cuda.is_available()';",
          "docker stop kubyterlab-llm",
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "presentation": {
            "echo": true,
            "reveal": "always",
            "focus": false,
            "panel": "shared"
        },
        "problemMatcher": []
      },
      {
        "label": "freeze-kubyterlab-llm",
        "dependsOn": "build",
        "type": "shell",
        "command": [
          "docker run -d --rm --volume ${workspaceFolder}/kubyterlab-llm/notebooks:/jupyterlab/notebooks --name kubyterlab-llm kubyterlab-llm:${config:kubyterlab-llm.version};",
          "docker exec -it kubyterlab-llm bash -c 'mkdir -p /tmp; pip freeze > /tmp/freeze.txt';",
          "docker cp kubyterlab-llm:/tmp/freeze.txt ./kubyterlab-llm/freeze/${config:kubyterlab-llm.version}.txt;",
          "docker stop kubyterlab-llm",
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "presentation": {
            "echo": true,
            "reveal": "always",
            "focus": false,
            "panel": "shared"
        },
        "problemMatcher": []
      },
      {
      "label": "get-key-for-jupyterlab-aic",
      "type": "shell",
      "command": "docker exec -it jupyterlab-iac bash -c 'jupyter server list | grep token | sed -n \\\"s/.*token=//p\\\" | sed -n \\\"s/::.*//p\\\"'",
      "group": {
          "kind": "build",
          "isDefault": true
      },
      "presentation": {
          "echo": true,
          "reveal": "always",
          "focus": false,
          "panel": "shared"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
		{
			"id": "provider",
			"type": "pickString",
			"description": "Choose a provider to pull kubeconfig data for",
			"options": ["exoscale", "aws"]
		}
	]
}