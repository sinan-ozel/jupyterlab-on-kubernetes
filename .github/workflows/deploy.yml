name: Deploy Basic Server for Testing

on:
  workflow_dispatch:
    inputs:
      provider:
        description: "Select the cloud provider"
        required: true
        type: choice
        options:
          - aws
          - exoscale

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: hello-k8s
      NAMESPACE: default
      REPO: sinan-ozel/iac-private

    steps:
    - name: Create working directories
      run: |
        mkdir -p repo
        mkdir -p iac

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: repo

    - name: Authenticate to GitHub
      run: |
        gh auth login --with-token <<< "${{ secrets.PERSONAL_ACCESS_TOKEN }}"


    - name: Download latest pulumi stack outputs artifact
      working-directory: iac
      run: |
        gh run download --repo ${{ env.REPO }} --name pulumi-${{ inputs.provider }}-${{ env.CLUSTER_NAME}}
        ls -al
        cat ${{ env.CLUSTER_NAME}}.json

    - name: Extract kubeconfig from JSON
      run: |
        jq -r '.kubeconfig' iac/${{ env.CLUSTER_NAME}}.json > iac/kubeconfig.yaml

        REGION=$(jq -r '.region' iac/${{ env.CLUSTER_NAME}}.json)
        echo "REGION=$REGION" >> $GITHUB_ENV

    - name: Create AWS credentials secret
      if: github.event.inputs.provider == 'aws'
      run: |
        mkdir -p tmp
        printf "[default]\naws_access_key_id=%s\naws_secret_access_key=%s\nregion=%s\n" \
          "${{ secrets.AWS_ACCESS_KEY_ID }}" \
          "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          "${{ env.REGION }}" > tmp/credentials

        AWS_SHARED_CREDENTIALS_FILE=tmp/credentials aws sts get-caller-identity
        AWS_ACCOUNT_ID=$(AWS_SHARED_CREDENTIALS_FILE=tmp/credentials aws sts get-caller-identity --query Account --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

        export AWS_SHARED_CREDENTIALS_FILE=$PWD/tmp/credentials
        echo "AWS_SHARED_CREDENTIALS_FILE=$PWD/tmp/credentials" >> $GITHUB_ENV

        if [ -z "$AWS_ACCOUNT_ID" ] || [ "$AWS_ACCOUNT_ID" = "None" ]; then
          echo "Error: AWS_ACCOUNT_ID was not set"
          exit 1
        fi

    - name: Connect to Kubernetes
      run: |
        kubectl --kubeconfig=iac/kubeconfig.yaml config view

    - name: List Kubernetes nodes for debugging
      run: |
        kubectl --kubeconfig=iac/kubeconfig.yaml get nodes -o wide